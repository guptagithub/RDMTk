{
trialpointer=trialstarters[cursubj]				#update the current trial to start from
numtrials=sum(dat$subj==dat$subj[trialpointer])		#determine number of trials for that person
subjmat=dat[trialpointer:(trialpointer+numtrials-1),]
cumdeckmat=matrix(0,nrow=numtrials,ncol=numdecks)	#This section creates a matrix for a…
cumdeckmat[1,subjmat$deck[1]]=1				#cumulative count of decks chosen…
for (curtrial in 2:numtrials)					#and then truncates according to the…
{							#cardsperdeck variable.
choicevec=rep(0,numdecks)
choicevec[subjmat$deck[curtrial]]=1
cumdeckmat[curtrial,]=cumdeckmat[curtrial-1,]+choicevec
if((max(cumdeckmat[curtrial,])>=cardsperdeck)&(curtrial<numtrials))
{
numtrials=curtrial
}
}
subjmat=subjmat[1:numtrials,]
numtrialsvec[cursubj]=numtrials
obspmat=matrix(nrow=numtrials,ncol=numdecks)
subjnumvec[cursubj]=as.character(subjmat$subj[1])
#run baseline and random model
for (curdeck in 1:numdecks)
{
obsp[curdeck]=sum(subjmat[,2]==curdeck)/numtrials
obspmat[,curdeck]=subjmat[,2]==curdeck
}
predpbasemat=matrix(obsp,nrow=numtrials,ncol=numdecks,byrow=TRUE)
predpbasemat= .0001 + .9998*predpbasemat
#note that the following loglikelihoods exclude trial 1 just like EVL model
loglikebase=sum(log(rowSums(obspmat*predpbasemat)[2:numtrials]))
loglikerand=(numtrials-1)*log(.0001+.9998/numdecks)
g2base[cursubj]=-2*loglikebase
g2rand[cursubj]=-2*loglikerand
}
View(predpbasemat)
View(subjmat)
g2base
#This program does the EVL, Baseline, & Random Models for the IGT
#EVL is the 3-parameter interference version
#This program automatically handles data files where the number of trials varies by subject.
#It can also handle deck depletion if you modify the cardsperdeck variable.
#This program will only model up to the trial where one deck runs out.
#Programmed by Anthony Bishara. Model from Busemeyer & Stout (2002).
#Version 7 uses a digital filter (kudos to Ryan Jessup for this idea)
#First Time R Users:
#R is free, and can be downloaded and installed from http://www.r-project.org/.  To find the download, click CRAN on the left side, then, choose a nearby geographic location to download from, then choose your operating system.  For Windows users, choose "base" when you get a chance.
#Instructions:
#1) Run R.
#2) In the program, click File, then Change Dir…, then choose the directory your data is in.
#3) Use tab-delimated text format for the data like for Eldad’s program, but add a column for subject.  Columns=trial, deck, redundant, wins, losses, and subject.
#Extra columns after the subject column are okay.
#Don’t use column labels.
#4) Modify the green sections below for your dataset.
#5) Select all the text in this document (ctrl+a), then copy and paste into R
#6) The output file is labelled "EVLresults_" plus the name of the data file.
rm(list=ls(all=TRUE))  					#This clears memory
#-------------------------------------Modify this section for modeling your dataset-----------------------------------
#dataname="fakedatasubj11and12.txt"
#Data to import. Columns=trial, deck, redundant, wins, loss, subject, etc.
payscale=100 				#e.g. payscale=100 if payouts are like +100,+50, -1250, etc.
cardsperdeck=1000			#For dealing with deck depletion. Use huge value if no depletion.
iterations=50				#Number of quasi-random starting parameter vectors. Default=50.
#-----------------------------------------------------------------------------------------------------------------------------------------
#-----------------Modify this section for calculating proportion advantageous for your dataset----------------
trialsperblock=20		#This is most commonly 20
blocks=6			#This is most commonly 5
advdecks=c(3,4)		#advantagous decks should be listed inside the parentheses
#-----------------------------------------------------------------------------------------------------------------------------------------
if(sum(rownames(installed.packages())=="fOptions")==0)	 #If the fOptions package is not installed, …
install.packages("fOptions") 				#…install it now.
library(fOptions) 						#This library is used for quasi-random generation
numdecks=4  							#This option isn’t quite ready yet; keep it at 4.
starttime=Sys.time()						#store the time
#dat=read.table(dataname,sep="\t")				#load data file into dataframe named dat
dat=rdmtkGetIGTData("IGT","jviGo1iyiE");			#load data file into dataframe named dat
standcolnames= c("trial","deck","na","wins","losses","subj")	#standard column labels for dat
numcolumns=length(colnames(dat))				#number of columns in dat
if(numcolumns>6) standcolnames=c(standcolnames,paste("extra",1:(numcolumns-6),sep=""))
colnames(dat)=standcolnames
numsubj=sum(dat$trial==1)					#compute the number of subjects
parbounds=c(0,0,-5,1,1,5)					#parameter bounds (min,min,…,max,max,…)
#Quasi-random numbers are used instead of an
#initial starting grid
initparmatscaled=matrix(nrow=iterations,ncol=3)		#This section creates a matrix of quasi-random…
sobelmat=runif.sobol(iterations,3,1,0,Sys.time())		#starting parameters and scales them.
sobelmat[,3]=sobelmat[,3]*2.5-1.25				#This makes c from -1.25 to +1.25
initparmat=sobelmat
for (i in 1:iterations) initparmatscaled[i,]=scalepars(initparmat[i,],parbounds[1:3],parbounds[4:6])
obsp=1:numdecks
subjnumvec=rep(NA,numsubj)
numtrialsvec=rep(NA,numsubj)
g2base=rep(NA,numsubj)
g2rand=rep(NA,numsubj)
#g2evl=rep(NA,numsubj)
#parsevl=matrix(nrow=numsubj,ncol=3)
trialstarters=((dat$trial==1)*seq(1,length(dat$trial)))[dat$trial==1]
#firstminvec=rep(NA,numsubj)
for (cursubj in 1:numsubj)
{
trialpointer=trialstarters[cursubj]				#update the current trial to start from
numtrials=sum(dat$subj==dat$subj[trialpointer])		#determine number of trials for that person
subjmat=dat[trialpointer:(trialpointer+numtrials-1),]
cumdeckmat=matrix(0,nrow=numtrials,ncol=numdecks)	#This section creates a matrix for a…
cumdeckmat[1,subjmat$deck[1]]=1				#cumulative count of decks chosen…
for (curtrial in 2:numtrials)					#and then truncates according to the…
{							#cardsperdeck variable.
choicevec=rep(0,numdecks)
choicevec[subjmat$deck[curtrial]]=1
cumdeckmat[curtrial,]=cumdeckmat[curtrial-1,]+choicevec
if((max(cumdeckmat[curtrial,])>=cardsperdeck)&(curtrial<numtrials))
{
numtrials=curtrial
}
}
subjmat=subjmat[1:numtrials,]
numtrialsvec[cursubj]=numtrials
obspmat=matrix(nrow=numtrials,ncol=numdecks)
subjnumvec[cursubj]=as.character(subjmat$subj[1])
#run baseline and random model
for (curdeck in 1:numdecks)
{
obsp[curdeck]=sum(subjmat[,2]==curdeck)/numtrials
obspmat[,curdeck]=subjmat[,2]==curdeck
}
predpbasemat=matrix(obsp,nrow=numtrials,ncol=numdecks,byrow=TRUE)
predpbasemat= .0001 + .9998*predpbasemat
#note that the following loglikelihoods exclude trial 1 just like EVL model
loglikebase=sum(log(rowSums(obspmat*predpbasemat)[2:numtrials]))
loglikerand=(numtrials-1)*log(.0001+.9998/numdecks)
g2base[cursubj]=-2*loglikebase
g2rand[cursubj]=-2*loglikerand
}
View(predpbasemat)
library(RDMTkAnalysisR)
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTBaselineModel("IGT", "jviGo1iyiE", c(3, 4))
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTBaselineModel("IGT", "jviGo1iyiE", c(3, 4))
RDMTkAnalysisR::rdmtkIGTBaselineModel("IGT", "jviGo1iyiE", c(3, 4))
RDMTkAnalysisR::rdmtkIGTBaselineModel("IGT", "jviGo1iyiE", c(3,4))
RDMTkAnalysisR::rdmtkIGTBaselineModel("IGT", "jviGo1iyiE", c(3,4),)
advDeck=c(3,4)
RDMTkAnalysisR::rdmtkIGTBaselineModel("IGT", "jviGo1iyiE", advDeck)
RDMTkAnalysisR::rdmtkIGTBaselineModel("IGT", "jviGo1iyiE", as.list(advDeck))
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTBaselineModel("IGT", "jviGo1iyiE", as.list(advDeck))
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTBaselineModel("IGT", "jviGo1iyiE")
RDMTkAnalysisR::rdmtkIGTRandomModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
RDMTkAnalysisR::rdmtkIGTRandomModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
View(subjmat)
subjmat$wins
abs(subjmat$wins)
subjmat$wins<-as.numeric(as.character(subjmat$wins))
subjmat$wins
abs(subjmat$wins)
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
setwd("~/NetBeansProjects/RDMTk/rdmtk_r_scripts/RDMTkAnalysisR/R")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
tempfile(pattern = "EVLresults_", tmpdir = tempdir(), fileext = "txt")
tempfile(pattern = "EVLresults_", tmpdir = tempdir(), fileext = ".txt")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
source('~/NetBeansProjects/RDMTk/rdmtk_r_scripts/RDMTkAnalysisR/R/rdmtkGetIGTData.R')
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
source('~/NetBeansProjects/RDMTk/rdmtk_r_scripts/RDMTkAnalysisR/R/rdmtkGetIGTData.R')
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
debug(RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE"))
RDMTkAnalysisR::rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
source('~/NetBeansProjects/RDMTk/rdmtk_r_scripts/RDMTkAnalysisR/R/rdmtkGetIGTData.R')
library(RDMTkAnalysisR)
rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
source('~/NetBeansProjects/RDMTk/rdmtk_r_scripts/RDMTkAnalysisR/R/rdmtkGetIGTData.R')
library(RDMTkAnalysisR)
rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
View(rslt)
rslt[1]
cnt=rslt[1]
cnt
View(cnt)
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
View(rdmtkGetIGTData)
View(rdmtkGetIGTData)
'BASE_MDL'
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
rslt
capture.output(print(rslt))
View(rslt)
print(rslt, quote = TRUE, row.names = FALSE)
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
rslt
serialize(rslt, NULL, ascii=TRUE)
txt_binary <- serialize(rslt, NULL, ascii=TRUE)
txt_binary
head(unserialize(txt_binary))
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
rslt
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
rslt=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
rslt
head(unserialize(rslt))
list(as.raw(c(0x41, 0x0a, 0x32, 0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x34, 0x0a, 0x4d, 0x49, 0x44, 0x31, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, 0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x34, 0x0a, 0x4d, 0x49, 0x44, 0x33, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, 0x0a, \n0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x32, 0x0a, 0x32, 0x30, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, 0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x32, 0x0a, 0x32, 0x30, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, 0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, \n0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x31, 0x36, 0x0a, 0x34, 0x34, 0x2e, 0x33, 0x32, 0x32, 0x30, 0x30, 0x30, 0x37, 0x31, 0x33, 0x39, 0x37, 0x30, 0x39, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, 0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x31, 0x36, 0x0a, 0x33, 0x32, 0x2e, 0x37, 0x39, 0x34, 0x38, 0x33, 0x35, 0x34, 0x34, 0x37, 0x35, \n0x32, 0x38, 0x31, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, 0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x31, 0x37, 0x0a, 0x30, 0x2e, 0x31, 0x39, 0x39, 0x34, 0x33, 0x36, 0x37, 0x34, 0x37, 0x30, 0x38, 0x31, 0x31, 0x32, 0x38, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, 0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, \n0x32, 0x31, 0x35, 0x33, 0x0a, 0x31, 0x37, 0x0a, 0x30, 0x2e, 0x31, 0x34, 0x33, 0x37, 0x30, 0x31, 0x38, 0x33, 0x39, 0x36, 0x34, 0x33, 0x36, 0x36, 0x38, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, 0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x31, 0x37, 0x0a, 0x30, 0x2e, 0x33, 0x31, 0x37, 0x37, 0x31, 0x37, 0x38, 0x30, 0x33, 0x32, 0x31, 0x36, 0x31, 0x34, 0x33, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, \n0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x32, 0x30, 0x0a, 0x31, 0x2e, 0x33, 0x38, 0x33, 0x37, 0x35, 0x35, 0x33, 0x36, 0x35, 0x30, 0x30, 0x38, 0x35, 0x37, 0x65, 0x2d, 0x30, 0x37, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, 0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x31, \n0x36, 0x0a, 0x34, 0x2e, 0x37, 0x32, 0x36, 0x39, 0x38, 0x36, 0x34, 0x35, 0x35, 0x32, 0x38, 0x30, 0x31, 0x38, 0x0a)), as.raw(c(0x41, 0x0a, 0x32, 0x0a, 0x31, 0x39, 0x37, 0x31, 0x32, 0x34, 0x0a, 0x31, 0x33, 0x31, 0x38, 0x34, 0x30, 0x0a, 0x31, 0x36, 0x0a, 0x31, 0x0a, 0x32, 0x36, 0x32, 0x31, 0x35, 0x33, 0x0a, 0x31, 0x35, 0x0a, 0x34, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x32, 0x37, 0x0a)))
rslt[1]
rslt$anlys_rslt
rslt$anlys_rslt[1]
head(unserialize(rslt$anlys_rslt[1]))
lapply(rslt$anlys_rslt, 'unserialize')
lapply(rslt$anlys_rslt[1], 'unserialize')
rawToChar(rslt$anlys_rslt)
rawToChar(rslt$anlys_rslt[1])
base64Encode(rawToChar(serialize(rslt$anlys_rslt, connection = NULL, ascii = TRUE)))
rawToChar(serialize(rslt$anlys_rslt, connection = NULL, ascii = TRUE))
rawToChar(rslt$anlys_rslt[1])
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
rslt
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
unserialize(charToRaw(x))
unserialize(charToRaw(x$anlys_rslt))
unserialize(charToRaw(x$anlys_rslt[1]))
list("A\n2\n197124\n131840\n16\n1\n262153\n4\nMID1\n", "A\n2\n197124\n131840\n16\n1\n262153\n4\nMID3\n", "A\n2\n197124\n131840\n16\n1\n262153\n2\n20\n", "A\n2\n197124\n131840\n16\n1\n262153\n2\n20\n", "A\n2\n197124\n131840\n16\n1\n262153\n16\n44.3220007139709\n", "A\n2\n197124\n131840\n16\n1\n262153\n16\n32.7948354475281\n", "A\n2\n197124\n131840\n16\n1\n262153\n17\n0.199436747081128\n", "A\n2\n197124\n131840\n16\n1\n262153\n17\n0.143701839643668\n", "A\n2\n197124\n131840\n16\n1\n262153\n17\n0.317717803216143\n", \n    "A\n2\n197124\n131840\n16\n1\n262153\n20\n1.38375536500857e-07\n", "A\n2\n197124\n131840\n16\n1\n262153\n16\n4.72698645528018\n", "A\n2\n197124\n131840\n16\n1\n262153\n15\n4.9999999989927\n")
xx=list("A\n2\n197124\n131840\n16\n1\n262153\n4\nMID1\n", "A\n2\n197124\n131840\n16\n1\n262153\n4\nMID3\n", "A\n2\n197124\n131840\n16\n1\n262153\n2\n20\n", "A\n2\n197124\n131840\n16\n1\n262153\n2\n20\n", "A\n2\n197124\n131840\n16\n1\n262153\n16\n44.3220007139709\n", "A\n2\n197124\n131840\n16\n1\n262153\n16\n32.7948354475281\n", "A\n2\n197124\n131840\n16\n1\n262153\n17\n0.199436747081128\n", "A\n2\n197124\n131840\n16\n1\n262153\n17\n0.143701839643668\n", "A\n2\n197124\n131840\n16\n1\n262153\n17\n0.317717803216143\n", \n    "A\n2\n197124\n131840\n16\n1\n262153\n20\n1.38375536500857e-07\n", "A\n2\n197124\n131840\n16\n1\n262153\n16\n4.72698645528018\n", "A\n2\n197124\n131840\n16\n1\n262153\n15\n4.9999999989927\n")
library(RDMTkAnalysisR)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
gs2 <- lapply(x$anlys_rslt, 'unserialize')
gs2 <- lapply(x$anlys_rslt[1], 'unserialize')
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
gs2 <- lapply(x$anlys_rslt[1], 'unserialize')
paste(x, collapse = " ")
xx=paste(x, collapse = " ")
gs2 <- lapply(xx, 'unserialize')
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
gs <- list()
for(i in 1:10)
gs[[i]] <- watts.strogatz.game(1, 100, 5, 0.05)
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
serDf <- serialize(rslt, NULL, ascii=TRUE)
serDf
paste(serDf, collapse=',' )
xx = paste(serDf, collapse=',' )
strsplit(xx, ",", fixed = TRUE)
head(unserialize(xx))
head(unserialize(serDf))
as.numeric(xx[1])
xxx= strsplit(xx, ",", fixed = TRUE)
xxx
as.numeric(xxx[1])
xxx[1]
xxx[1]
length(xxx)
xxx[1,1]
xxx[1]
xxx[1][1]
xxx[[1]]
xxx[[2]]
xxx[[1]]
y <- strsplit(xxx,",",fixed=TRUE)
xx = paste(serDf, collapse=',' )
y <- strsplit(xx,",",fixed=TRUE)
lapply(y,FUN=function(x){})
lapply(y,FUN=function(x){as.character()})
lapply(y,FUN=function(x){as.character(x)})
head(unserialize(lapply(y,FUN=function(x){as.character(x)}))
)
xx
xxx
xxx(2)
xxx[[2]][1]
xxx[[1]][1]
xxx[[1]][2]
as.numeric(xxx[1][1])
as.numeric(xxx[[1]][1])
as.numeric(xxx[[1]][2])
a =xxx[[1]][2]
a
a =as.character(xxx[[1]][2])
a
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
y <- strsplit(x,",",fixed=TRUE)
y <- strsplit(x$anlys_rslt,",",fixed=TRUE)
y
length(y)
length(y[[1]])
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
rslt
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
y <- strsplit(x$anlys_rslt,",",fixed=TRUE)
y
length(y[[1]])
lapply(y[[1]], 'unserialize')
lapply(y[[1]][1], 'unserialize')
lapply(41, 'unserialize')
as.character(y[[1]])
as.character(y[[1]][])
unlist(y[[1]], recursive = TRUE, use.names = TRUE)
yy = unlist(y[[1]], recursive = TRUE, use.names = TRUE)
head(unserialize(yy))
yy
asc(yy)
strtoi(charToRaw(yy[1]),16L) }
strtoi(charToRaw(yy[1]),16L)
yy[1]
as.numeric(yy[1])
as.numeric(yy)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
y <- strsplit(x$anlys_rslt,",",fixed=TRUE)
y
yy = unlist(y[[1]], recursive = TRUE, use.names = TRUE)
as.hexmode(yy)
yy
as.raw(yy)
yy = unlist(y[[1]], recursive = TRUE, use.names = TRUE)
yy
as.raw(yy)
head(unserialize(yy))
head(unserialize(serDf))
typeof(serDf)
rawToChar(serDf)
a=rawToChar(serDf)
charToRaw(z)
charToRaw(a)
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
rslt
charToRaw(rslt)
b=charToRaw(rslt)
head(unserialize(b))
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
rslt
b=charToRaw(rslt)
head(unserialize(b))
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
head(unserialize(x))
b=charToRaw(x)
b=charToRaw(x$anlys_rslt)
head(unserialize(b))
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
library(RDMTkAnalysisR)
rslt=rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
rslt
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
as.null(tempRslt)
as.null
as.null(x)
if(length(tempRslt) == 1)
{}
if(length(x) == 1)
{}
library(RDMTkAnalysisR)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
rdmtkIGTMdlRslts()
rdmtkIGTMdlRslts
rdmtkIGTMdlRslts()
library(RDMTkAnalysisR)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
length(x)
length(x$anlys_rslt)
length(x$anlys_rslt)
library(RDMTkAnalysisR)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
library(RDMTkAnalysisR)
library(RDMTkAnalysisR)
library(RDMTkAnalysisR)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
library(RDMTkAnalysisR)
library(RDMTkAnalysisR)
library(RDMTkAnalysisR)
library(RDMTkAnalysisR)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "RND_MDL")
x
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "EVL_MDL")
x
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "BASE_MDL")
x
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "RND_MDL")
x
rdmtkIGTEVLModel("IGT", "jviGo1iyiE")
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "EVL_MDL")
x
library(RDMTkAnalysisR)
x=rdmtkIGTMdlRslts("IGT", "jviGo1iyiE", "EVL_MDL")
x
library(RDMTkAnalysisR)
